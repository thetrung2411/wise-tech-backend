{"ast":null,"code":"import _slicedToArray from\"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n            mutation mutateTreeStatus($treeId: ID, $newStatus: nodeStatusEnum) {\\n                updateRootNodeStatus(id: $treeId, status: $newStatus) {\\n                    id\\n                    status\\n                }\\n            }\\n        \"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n            {\\n                getAllRootNodes {\\n                    id\\n                    lastUpdated\\n                    name\\n                    status\\n                    treeId\\n                }\\n            }\\n        \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useEffect}from'react';import TreeCard from'../../components/tree-card/treeCard.jsx';import{useMutation,useQuery}from'@apollo/react-hooks';import{gql}from'apollo-boost';import cogoToast from'cogo-toast';import'./treeDashboard.scss';import NavBar from'../../components/nav-bar/navbar';import ErrorLayout from'../../components/error-layout/errorLayout.jsx';import LoadingLayout from'../../components/loading-layout/loadingLayout.jsx';export default function TreeDashboard(props){var _useQuery=useQuery(gql(_templateObject()),{pollInterval:10000}),queryData=_useQuery.data,queryError=_useQuery.error,refetch=_useQuery.refetch;var _useMutation=useMutation(gql(_templateObject2())),_useMutation2=_slicedToArray(_useMutation,1),mutateTreeStatus=_useMutation2[0];function modifyTreeStatus(treeId,newStatus){mutateTreeStatus({variables:{treeId:treeId,newStatus:newStatus}}).then(function(){return cogoToast.success(\"Tree status updated to \".concat(newStatus.toUpperCase()));}).catch(function(){return cogoToast.error('Failed to update Tree. Please try again later');});}useEffect(function(){refetch();},[mutateTreeStatus,refetch]);if(queryError){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(NavBar,null),/*#__PURE__*/React.createElement(ErrorLayout,null));}else if(queryData){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(NavBar,null),/*#__PURE__*/React.createElement(\"div\",{className:\"treeList page-content\"},queryData.getAllRootNodes.filter(function(tree){return tree.status===props.treeStatus;}).map(function(tree){return/*#__PURE__*/React.createElement(TreeCard,{key:tree.treeId,name:tree.name,treeId:tree.treeId,status:tree.status,lastUpdated:tree.lastUpdated,thumbnail:tree.thumbnail,modifyTreeStatus:modifyTreeStatus});}),/*#__PURE__*/React.createElement(TreeCard,{key:\"0\"})));}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(NavBar,null),/*#__PURE__*/React.createElement(LoadingLayout,null),\";\");}","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/pages/tree-dashboard/treeDashboard.jsx"],"names":["React","useEffect","TreeCard","useMutation","useQuery","gql","cogoToast","NavBar","ErrorLayout","LoadingLayout","TreeDashboard","props","pollInterval","queryData","data","queryError","error","refetch","mutateTreeStatus","modifyTreeStatus","treeId","newStatus","variables","then","success","toUpperCase","catch","getAllRootNodes","filter","tree","status","treeStatus","map","name","lastUpdated","thumbnail"],"mappings":"qnCAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,yCAArB,CACA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,qBAAtC,CACA,OAASC,GAAT,KAAoB,cAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAO,sBAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,iCAAnB,CACA,MAAOC,CAAAA,WAAP,KAAwB,+CAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,mDAA1B,CACA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,eACeP,QAAQ,CAC5DC,GAD4D,oBAY5D,CACIO,YAAY,CAAE,KADlB,CAZ4D,CADvB,CAC3BC,SAD2B,WACjCC,IADiC,CACTC,UADS,WAChBC,KADgB,CACGC,OADH,WACGA,OADH,kBAkBdd,WAAW,CAClCE,GADkC,qBAlBG,8CAkBlCa,gBAlBkC,kBA6BzC,QAASC,CAAAA,gBAAT,CAA0BC,MAA1B,CAAkCC,SAAlC,CAA6C,CACzCH,gBAAgB,CAAC,CACbI,SAAS,CAAE,CAAEF,MAAM,CAANA,MAAF,CAAUC,SAAS,CAATA,SAAV,CADE,CAAD,CAAhB,CAGKE,IAHL,CAGU,iBAAMjB,CAAAA,SAAS,CAACkB,OAAV,kCAA4CH,SAAS,CAACI,WAAV,EAA5C,EAAN,EAHV,EAIKC,KAJL,CAIW,iBAAMpB,CAAAA,SAAS,CAACU,KAAV,CAAgB,+CAAhB,CAAN,EAJX,EAKH,CAEDf,SAAS,CAAC,UAAM,CACZgB,OAAO,GACV,CAFQ,CAEN,CAACC,gBAAD,CAAmBD,OAAnB,CAFM,CAAT,CAIA,GAAIF,UAAJ,CAAgB,CACZ,mBACI,4CACI,oBAAC,MAAD,MADJ,cAEI,oBAAC,WAAD,MAFJ,CADJ,CAMH,CAPD,IAOO,IAAIF,SAAJ,CAAe,CAClB,mBACI,4CACI,oBAAC,MAAD,MADJ,cAEI,2BAAK,SAAS,CAAC,uBAAf,EACKA,SAAS,CAACc,eAAV,CACIC,MADJ,CACW,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,MAAL,GAAgBnB,KAAK,CAACoB,UAA1B,EADf,EAEIC,GAFJ,CAEQ,SAAAH,IAAI,CAAI,CACT,mBACI,oBAAC,QAAD,EACI,GAAG,CAAEA,IAAI,CAACT,MADd,CAEI,IAAI,CAAES,IAAI,CAACI,IAFf,CAGI,MAAM,CAAEJ,IAAI,CAACT,MAHjB,CAII,MAAM,CAAES,IAAI,CAACC,MAJjB,CAKI,WAAW,CAAED,IAAI,CAACK,WALtB,CAMI,SAAS,CAAEL,IAAI,CAACM,SANpB,CAOI,gBAAgB,CAAEhB,gBAPtB,EADJ,CAWH,CAdJ,CADL,cAgBI,oBAAC,QAAD,EAAU,GAAG,CAAC,GAAd,EAhBJ,CAFJ,CADJ,CAuBH,CAED,mBACI,4CACI,oBAAC,MAAD,MADJ,cAEI,oBAAC,aAAD,MAFJ,KADJ,CAMH","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TreeCard from '../../components/tree-card/treeCard.jsx';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport cogoToast from 'cogo-toast';\nimport './treeDashboard.scss';\nimport NavBar from '../../components/nav-bar/navbar';\nimport ErrorLayout from '../../components/error-layout/errorLayout.jsx';\nimport LoadingLayout from '../../components/loading-layout/loadingLayout.jsx';\nexport default function TreeDashboard(props) {\n    const { data: queryData, error: queryError, refetch } = useQuery(\n        gql`\n            {\n                getAllRootNodes {\n                    id\n                    lastUpdated\n                    name\n                    status\n                    treeId\n                }\n            }\n        `,\n        {\n            pollInterval: 10000,\n        }\n    );\n\n    const [mutateTreeStatus] = useMutation(\n        gql`\n            mutation mutateTreeStatus($treeId: ID, $newStatus: nodeStatusEnum) {\n                updateRootNodeStatus(id: $treeId, status: $newStatus) {\n                    id\n                    status\n                }\n            }\n        `\n    );\n\n    function modifyTreeStatus(treeId, newStatus) {\n        mutateTreeStatus({\n            variables: { treeId, newStatus },\n        })\n            .then(() => cogoToast.success(`Tree status updated to ${newStatus.toUpperCase()}`))\n            .catch(() => cogoToast.error('Failed to update Tree. Please try again later'));\n    }\n\n    useEffect(() => {\n        refetch();\n    }, [mutateTreeStatus, refetch]);\n\n    if (queryError) {\n        return (\n            <div>\n                <NavBar />\n                <ErrorLayout />\n            </div>\n        );\n    } else if (queryData) {\n        return (\n            <div>\n                <NavBar />\n                <div className='treeList page-content'>\n                    {queryData.getAllRootNodes\n                        .filter(tree => tree.status === props.treeStatus)\n                        .map(tree => {\n                            return (\n                                <TreeCard\n                                    key={tree.treeId}\n                                    name={tree.name}\n                                    treeId={tree.treeId}\n                                    status={tree.status}\n                                    lastUpdated={tree.lastUpdated}\n                                    thumbnail={tree.thumbnail}\n                                    modifyTreeStatus={modifyTreeStatus}\n                                />\n                            );\n                        })}\n                    <TreeCard key='0' />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <NavBar />\n            <LoadingLayout />;\n        </div>\n    );\n}\n\nTreeDashboard.propTypes = {\n    treeStatus: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}