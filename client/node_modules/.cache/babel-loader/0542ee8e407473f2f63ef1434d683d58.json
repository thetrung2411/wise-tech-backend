{"ast":null,"code":"import _slicedToArray from\"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{useMutation}from'@apollo/react-hooks';import cogoToast from'cogo-toast';import{Link,useHistory}from'react-router-dom';import{ReactComponent as PlusIcon}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/icon-plus.svg\";import{ReactComponent as WTLogo}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/logo-brand-full.svg\";import toShortDate from'../../services/dateService';import StatusDropdown from'../tree-status-dropdown/statusDropdown';import{CREATE_NEW_ROOT_NODE}from'../../services/graphQL/dashboardApiHelper';import'./treeCard.scss';export default function TreeCard(props){var _useMutation=useMutation(CREATE_NEW_ROOT_NODE),_useMutation2=_slicedToArray(_useMutation,1),createNewRootNode=_useMutation2[0];var history=useHistory();var treeStatusOptions={published:[{label:'Unpublish',value:'draft'},{label:'Archive',value:'archived'}],draft:[{label:'Publish',value:'published'},{label:'Archive',value:'archived'}]};function handleNewCardClick(){createNewRootNode().then(function(res){cogoToast.success('This can be found in Drafts',{heading:'Created a new tree'});history.replace(\"/tree/\".concat(res.data.createRootNode.id));}).catch(function(){cogoToast.error('Failed to create new node');});}function modifyTreeStatus(selection){if(selection==='archived'){var _cogoToast$warn=cogoToast.warn('Archived trees can only be restored by Admins',{heading:'Are you sure? Click this to continue',onClick:function onClick(){props.modifyTreeStatus(props.treeId,selection);hide();},hideAfter:5}),hide=_cogoToast$warn.hide;}else{props.modifyTreeStatus(props.treeId,selection);}}if(props.treeId){return/*#__PURE__*/React.createElement(Link,{to:\"/tree/\".concat(props.treeId)},/*#__PURE__*/React.createElement(\"div\",{key:props.treeId,className:\"treeCard\"},/*#__PURE__*/React.createElement(\"div\",{alt:props.name,className:\"treeCard-thumbnail\"},/*#__PURE__*/React.createElement(WTLogo,{fill:\"#1d1765\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"treeCard-title\"},/*#__PURE__*/React.createElement(\"div\",{className:\"treeCard-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"treeCard-name\"},props.name),/*#__PURE__*/React.createElement(StatusDropdown,{options:treeStatusOptions[props.status],modifyTreeStatus:modifyTreeStatus})),/*#__PURE__*/React.createElement(\"p\",{className:\"treeCard-info\"},\"Last edited: \",toShortDate(props.lastUpdated)))));}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"treeCard newCard\",onClick:handleNewCardClick},/*#__PURE__*/React.createElement(\"div\",{className:\"newCard-content\"},/*#__PURE__*/React.createElement(PlusIcon,{fill:\"#0f2a46\",className:\"newCard-icon\"}),/*#__PURE__*/React.createElement(\"p\",{className:\"treeCard-name\"},\"Create a new Tree\")));}}","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/components/tree-card/treeCard.jsx"],"names":["React","useMutation","cogoToast","Link","useHistory","toShortDate","StatusDropdown","CREATE_NEW_ROOT_NODE","TreeCard","props","createNewRootNode","history","treeStatusOptions","published","label","value","draft","handleNewCardClick","then","res","success","heading","replace","data","createRootNode","id","catch","error","modifyTreeStatus","selection","warn","onClick","treeId","hide","hideAfter","name","status","lastUpdated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useMutation } from '@apollo/react-hooks';\nimport cogoToast from 'cogo-toast';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { ReactComponent as PlusIcon } from '../../assets/icons/icon-plus.svg';\nimport { ReactComponent as WTLogo } from '../../assets/icons/logo-brand-full.svg';\nimport toShortDate from '../../services/dateService';\nimport StatusDropdown from '../tree-status-dropdown/statusDropdown';\nimport { CREATE_NEW_ROOT_NODE } from '../../services/graphQL/dashboardApiHelper';\nimport './treeCard.scss';\n\nexport default function TreeCard(props) {\n    const [createNewRootNode] = useMutation(CREATE_NEW_ROOT_NODE);\n    const history = useHistory();\n    const treeStatusOptions = {\n        published: [\n            { label: 'Unpublish', value: 'draft' },\n            { label: 'Archive', value: 'archived' },\n        ],\n        draft: [\n            { label: 'Publish', value: 'published' },\n            { label: 'Archive', value: 'archived' },\n        ],\n    };\n\n    function handleNewCardClick() {\n        createNewRootNode()\n            .then(res => {\n                cogoToast.success('This can be found in Drafts', {\n                    heading: 'Created a new tree',\n                });\n                history.replace(`/tree/${res.data.createRootNode.id}`);\n            })\n            .catch(() => {\n                cogoToast.error('Failed to create new node');\n            });\n    }\n\n    function modifyTreeStatus(selection) {\n        if (selection === 'archived') {\n            const { hide } = cogoToast.warn('Archived trees can only be restored by Admins', {\n                heading: 'Are you sure? Click this to continue',\n                onClick: () => {\n                    props.modifyTreeStatus(props.treeId, selection);\n                    hide();\n                },\n                hideAfter: 5,\n            });\n        } else {\n            props.modifyTreeStatus(props.treeId, selection);\n        }\n    }\n\n    if (props.treeId) {\n        return (\n            <Link to={`/tree/${props.treeId}`}>\n                <div key={props.treeId} className='treeCard'>\n                    <div alt={props.name} className='treeCard-thumbnail'>\n                        <WTLogo fill='#1d1765' />\n                    </div>\n                    <div className='treeCard-title'>\n                        <div className='treeCard-container'>\n                            <p className='treeCard-name'>{props.name}</p>\n                            <StatusDropdown\n                                options={treeStatusOptions[props.status]}\n                                modifyTreeStatus={modifyTreeStatus}\n                            />\n                        </div>\n                        <p className='treeCard-info'>Last edited: {toShortDate(props.lastUpdated)}</p>\n                    </div>\n                </div>\n            </Link>\n        );\n    } else {\n        return (\n            <div className='treeCard newCard' onClick={handleNewCardClick}>\n                <div className='newCard-content'>\n                    <PlusIcon fill='#0f2a46' className='newCard-icon'></PlusIcon>\n                    <p className='treeCard-name'>Create a new Tree</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nTreeCard.propTypes = {\n    lastUpdated: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.string,\n    thumbnail: PropTypes.string,\n    treeId: PropTypes.string,\n    modifyTreeStatus: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}