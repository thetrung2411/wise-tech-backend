{"ast":null,"code":"var _jsxFileName = \"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/pages/tree-dashboard/treeDashboard.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TreeCard from '../../components/tree-card/treeCard.jsx';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport cogoToast from 'cogo-toast';\nimport './treeDashboard.scss';\nimport NavBar from '../../components/nav-bar/navbar';\nimport ErrorLayout from '../../components/error-layout/errorLayout.jsx';\nimport LoadingLayout from '../../components/loading-layout/loadingLayout.jsx';\nexport default function TreeDashboard(props) {\n  const {\n    data: queryData,\n    error: queryError,\n    refetch\n  } = useQuery(gql`\n            {\n                getAllRootNodes {\n                    id\n                    lastUpdated\n                    name\n                    status\n                    treeId\n                }\n            }\n        `, {\n    pollInterval: 10000\n  });\n  const [mutateTreeStatus] = useMutation(gql`\n            mutation mutateTreeStatus($treeId: ID, $newStatus: nodeStatusEnum) {\n                updateRootNodeStatus(id: $treeId, status: $newStatus) {\n                    id\n                    status\n                }\n            }\n        `);\n\n  function modifyTreeStatus(treeId, newStatus) {\n    mutateTreeStatus({\n      variables: {\n        treeId,\n        newStatus\n      }\n    }).then(() => cogoToast.success(`Tree status updated to ${newStatus.toUpperCase()}`)).catch(() => cogoToast.error('Failed to update Tree. Please try again later'));\n  }\n\n  useEffect(() => {\n    refetch();\n  }, [mutateTreeStatus, refetch]);\n\n  if (queryError) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ErrorLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }));\n  } else if (queryData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treeList page-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, queryData.getAllRootNodes.filter(tree => tree.status === props.treeStatus).map(tree => {\n      return /*#__PURE__*/React.createElement(TreeCard, {\n        key: tree.treeId,\n        name: tree.name,\n        treeId: tree.treeId,\n        status: tree.status,\n        lastUpdated: tree.lastUpdated,\n        thumbnail: tree.thumbnail,\n        modifyTreeStatus: modifyTreeStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }\n      });\n    }), /*#__PURE__*/React.createElement(TreeCard, {\n      key: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LoadingLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), \";\");\n}\nTreeDashboard.propTypes = {\n  treeStatus: PropTypes.string\n};","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/pages/tree-dashboard/treeDashboard.jsx"],"names":["React","useEffect","PropTypes","TreeCard","useMutation","useQuery","gql","cogoToast","NavBar","ErrorLayout","LoadingLayout","TreeDashboard","props","data","queryData","error","queryError","refetch","pollInterval","mutateTreeStatus","modifyTreeStatus","treeId","newStatus","variables","then","success","toUpperCase","catch","getAllRootNodes","filter","tree","status","treeStatus","map","name","lastUpdated","thumbnail","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TreeCard from '../../components/tree-card/treeCard.jsx';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport cogoToast from 'cogo-toast';\nimport './treeDashboard.scss';\nimport NavBar from '../../components/nav-bar/navbar';\nimport ErrorLayout from '../../components/error-layout/errorLayout.jsx';\nimport LoadingLayout from '../../components/loading-layout/loadingLayout.jsx';\nexport default function TreeDashboard(props) {\n    const { data: queryData, error: queryError, refetch } = useQuery(\n        gql`\n            {\n                getAllRootNodes {\n                    id\n                    lastUpdated\n                    name\n                    status\n                    treeId\n                }\n            }\n        `,\n        {\n            pollInterval: 10000,\n        }\n    );\n\n    const [mutateTreeStatus] = useMutation(\n        gql`\n            mutation mutateTreeStatus($treeId: ID, $newStatus: nodeStatusEnum) {\n                updateRootNodeStatus(id: $treeId, status: $newStatus) {\n                    id\n                    status\n                }\n            }\n        `\n    );\n\n    function modifyTreeStatus(treeId, newStatus) {\n        mutateTreeStatus({\n            variables: { treeId, newStatus },\n        })\n            .then(() => cogoToast.success(`Tree status updated to ${newStatus.toUpperCase()}`))\n            .catch(() => cogoToast.error('Failed to update Tree. Please try again later'));\n    }\n\n    useEffect(() => {\n        refetch();\n    }, [mutateTreeStatus, refetch]);\n\n    if (queryError) {\n        return (\n            <div>\n                <NavBar />\n                <ErrorLayout />\n            </div>\n        );\n    } else if (queryData) {\n        return (\n            <div>\n                <NavBar />\n                <div className='treeList page-content'>\n                    {queryData.getAllRootNodes\n                        .filter(tree => tree.status === props.treeStatus)\n                        .map(tree => {\n                            return (\n                                <TreeCard\n                                    key={tree.treeId}\n                                    name={tree.name}\n                                    treeId={tree.treeId}\n                                    status={tree.status}\n                                    lastUpdated={tree.lastUpdated}\n                                    thumbnail={tree.thumbnail}\n                                    modifyTreeStatus={modifyTreeStatus}\n                                />\n                            );\n                        })}\n                    <TreeCard key='0' />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <NavBar />\n            <LoadingLayout />;\n        </div>\n    );\n}\n\nTreeDashboard.propTypes = {\n    treeStatus: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}