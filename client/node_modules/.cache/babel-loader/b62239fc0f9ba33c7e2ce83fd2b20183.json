{"ast":null,"code":"var _jsxFileName = \"/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/components/preview-bar/previewBar.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport EditNodeLayout from './editNode.layout';\nimport ViewNode from './viewNode.layout';\nimport CreateNodeLayout from './createNode.layout';\nimport './previewBar.scss';\nexport function PreviewBar(props) {\n  const [viewingMode, setViewingMode] = useState(props.chooseMode);\n  const [formData, setFormData] = useState(props.nodeData);\n  useEffect(() => {\n    setFormData(props.nodeData);\n    setViewingMode(props.chooseMode);\n  }, [props.nodeData, props.chooseMode]);\n\n  function toggleViewingMode() {\n    viewingMode === 'viewing' ? setViewingMode('editing') : setViewingMode('viewing');\n  }\n\n  if (viewingMode === 'viewing') {\n    return /*#__PURE__*/React.createElement(ViewNode, {\n      resetPreviewBarAndDialogOpen: props.closePreview,\n      toggleViewingMode: toggleViewingMode,\n      formData: formData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    });\n  } else if (viewingMode === 'editing') {\n    return /*#__PURE__*/React.createElement(EditNodeLayout, {\n      updateCurrentNode: props.handleNodeAttributesUpdate,\n      toggleViewingMode: toggleViewingMode,\n      formData: formData,\n      isParentRootNode: formData.parentId === props.rootNodeId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    });\n  } else if (viewingMode === 'creating') {\n    return /*#__PURE__*/React.createElement(CreateNodeLayout, {\n      createNewNode: props.refreshView,\n      closeForm: props.closeForm,\n      isParentRootNode: !formData.parentId,\n      parentId: formData.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    });\n  } else return null;\n}\nPreviewBar.propTypes = {\n  rootNodeId: PropTypes.string.isRequired,\n  nodeData: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    entityType: PropTypes.string,\n    description: PropTypes.string,\n    tactic: PropTypes.string,\n    necessity: PropTypes.string,\n    logic: PropTypes.string,\n    if: PropTypes.string,\n    and: PropTypes.string,\n    then: PropTypes.string,\n    because: PropTypes.string,\n    sufficiency: PropTypes.string,\n    optionalityAndSequence: PropTypes.string,\n    nodeDataColor: PropTypes.string,\n    customProperty: PropTypes.string,\n    parentId: PropTypes.string,\n    children: PropTypes.array\n  }),\n  closeForm: PropTypes.func.isRequired,\n  handleNodeAttributesUpdate: PropTypes.func.isRequired,\n  chooseMode: PropTypes.string.isRequired,\n  closePreview: PropTypes.func.isRequired,\n  refreshView: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/components/preview-bar/previewBar.jsx"],"names":["React","useState","useEffect","PropTypes","EditNodeLayout","ViewNode","CreateNodeLayout","PreviewBar","props","viewingMode","setViewingMode","chooseMode","formData","setFormData","nodeData","toggleViewingMode","closePreview","handleNodeAttributesUpdate","parentId","rootNodeId","refreshView","closeForm","id","propTypes","string","isRequired","shape","name","entityType","description","tactic","necessity","logic","if","and","then","because","sufficiency","optionalityAndSequence","nodeDataColor","customProperty","children","array","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport EditNodeLayout from './editNode.layout';\nimport ViewNode from './viewNode.layout';\nimport CreateNodeLayout from './createNode.layout';\nimport './previewBar.scss';\n\nexport function PreviewBar(props) {\n    const [viewingMode, setViewingMode] = useState(props.chooseMode);\n    const [formData, setFormData] = useState(props.nodeData);\n\n    useEffect(() => {\n        setFormData(props.nodeData);\n        setViewingMode(props.chooseMode);\n    }, [props.nodeData, props.chooseMode]);\n\n    function toggleViewingMode() {\n        viewingMode === 'viewing' ? setViewingMode('editing') : setViewingMode('viewing');\n    }\n\n    if (viewingMode === 'viewing') {\n        return (\n            <ViewNode\n                resetPreviewBarAndDialogOpen={props.closePreview}\n                toggleViewingMode={toggleViewingMode}\n                formData={formData}\n            />\n        );\n    } else if (viewingMode === 'editing') {\n        return (\n            <EditNodeLayout\n                updateCurrentNode={props.handleNodeAttributesUpdate}\n                toggleViewingMode={toggleViewingMode}\n                formData={formData}\n                isParentRootNode={formData.parentId === props.rootNodeId}\n            />\n        );\n    } else if (viewingMode === 'creating') {\n        return (\n            <CreateNodeLayout\n                createNewNode={props.refreshView}\n                closeForm={props.closeForm}\n                isParentRootNode={!formData.parentId}\n                parentId={formData.id}\n            />\n        );\n    } else return null;\n}\n\nPreviewBar.propTypes = {\n    rootNodeId: PropTypes.string.isRequired,\n    nodeData: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        entityType: PropTypes.string,\n        description: PropTypes.string,\n        tactic: PropTypes.string,\n        necessity: PropTypes.string,\n        logic: PropTypes.string,\n        if: PropTypes.string,\n        and: PropTypes.string,\n        then: PropTypes.string,\n        because: PropTypes.string,\n        sufficiency: PropTypes.string,\n        optionalityAndSequence: PropTypes.string,\n        nodeDataColor: PropTypes.string,\n        customProperty: PropTypes.string,\n        parentId: PropTypes.string,\n        children: PropTypes.array,\n    }),\n    closeForm: PropTypes.func.isRequired,\n    handleNodeAttributesUpdate: PropTypes.func.isRequired,\n    chooseMode: PropTypes.string.isRequired,\n    closePreview: PropTypes.func.isRequired,\n    refreshView: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}