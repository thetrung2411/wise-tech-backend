{"ast":null,"code":"var _jsxFileName = \"/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/app.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Route, BrowserRouter, Switch, Redirect } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport cogoToast from 'cogo-toast';\nimport Login from './pages/login/login';\nimport TreeDashboard from './pages/tree-dashboard/treeDashboard';\nimport TreeEditor from './pages/tree-editor/treeEditor';\nimport AuthenticationContext, { AuthenticationProvider } from './services/authenticationContextProvider';\nimport './app.scss';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nfunction App() {\n  const [authenticationData, setAuthenticationData] = useState(AuthenticationContext);\n  useEffect(() => {}, [authenticationData]);\n\n  function clearAuthenticationData() {\n    setAuthenticationData({ ...authenticationData,\n      isLoggedIn: false\n    });\n  }\n\n  async function updateAuthenticationData(user) {\n    cogoToast.loading('Loading Authentication Info', {\n      hideAfter: 2\n    });\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        try {\n          setAuthenticationData(user);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      }, 2000);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AuthenticationProvider, {\n    value: {\n      authenticationData,\n      clearAuthenticationData,\n      updateAuthenticationData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TreeDashboard, {\n    treeStatus: \"published\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/drafts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TreeDashboard, {\n    treeStatus: \"draft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: '/tree/',\n    component: TreeEditor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    path: \"/\",\n    to: \"login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/app.js"],"names":["React","useState","useEffect","Route","BrowserRouter","Switch","Redirect","ApolloClient","ApolloProvider","cogoToast","Login","TreeDashboard","TreeEditor","AuthenticationContext","AuthenticationProvider","client","uri","App","authenticationData","setAuthenticationData","clearAuthenticationData","isLoggedIn","updateAuthenticationData","user","loading","hideAfter","Promise","resolve","reject","setTimeout","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Route, BrowserRouter, Switch, Redirect } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport cogoToast from 'cogo-toast';\nimport Login from './pages/login/login';\nimport TreeDashboard from './pages/tree-dashboard/treeDashboard';\nimport TreeEditor from './pages/tree-editor/treeEditor';\nimport AuthenticationContext, { AuthenticationProvider } from './services/authenticationContextProvider';\n\nimport './app.scss';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/graphql',\n});\n\nfunction App() {\n    const [authenticationData, setAuthenticationData] = useState(AuthenticationContext);\n\n    useEffect(() => {}, [authenticationData]);\n\n    function clearAuthenticationData() {\n        setAuthenticationData({ ...authenticationData, isLoggedIn: false });\n    }\n\n    async function updateAuthenticationData(user) {\n        cogoToast.loading('Loading Authentication Info', {\n            hideAfter: 2,\n        });\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                try {\n                    setAuthenticationData(user);\n                    resolve();\n                } catch (err) {\n                    reject(err);\n                }\n            }, 2000);\n        });\n    }\n\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <AuthenticationProvider\n                    value={{ authenticationData, clearAuthenticationData, updateAuthenticationData }}\n                >\n                    <Switch>\n                        <Route path='/login' component={Login} />\n                        <Route path='/dashboard'>\n                            <TreeDashboard treeStatus='published' />\n                        </Route>\n                        <Route path='/drafts'>\n                            <TreeDashboard treeStatus='draft' />\n                        </Route>\n                        <Route path={'/tree/'} component={TreeEditor} />\n                        <Redirect path='/' to='login' />\n                    </Switch>\n                </AuthenticationProvider>\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}