{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n    mutation deleteNodeAndAllChildren($id: ID) {\\n        deleteNodeAndAllChildren(id: $id) {\\n            referenceId\\n        }\\n    }\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n    mutation createChildNode(\\n        $and: String\\n        $because: String\\n        $description: String\\n        $entityType: nodeEntityTypeEnum\\n        $if: String\\n        $logic: String\\n        $necessity: String\\n        $name: String\\n        $optionalityAndSequence: String\\n        $parentId: ID\\n        $referenceId: String\\n        $tactic: String\\n        $then: String\\n        $sufficiency: String\\n    ) {\\n        createChildNode(\\n            and: $and\\n            because: $because\\n            description: $description\\n            entityType: $entityType\\n            if: $if\\n            logic: $logic\\n            name: $necessity\\n            necessity: $name\\n            optionalityAndSequence: $optionalityAndSequence\\n            parentId: $parentId\\n            referenceId: $referenceId\\n            sufficiency: $sufficiency\\n            tactic: $tactic\\n            then: $then\\n        ) {\\n            and\\n            because\\n            description\\n            entityType\\n            id\\n            if\\n            isRoot\\n            logic\\n            name\\n            necessity\\n            optionalityAndSequence\\n            parentId\\n            referenceId\\n            sufficiency\\n            tactic\\n            then\\n            treeId\\n        }\\n    }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n    mutation mutateNodeAttributes(\\n        $and: String\\n        $because: String\\n        $description: String\\n        $entityType: nodeEntityTypeEnum\\n        $id: ID\\n        $if: String\\n        $logic: String\\n        $name: String\\n        $necessity: String\\n        $optionalityAndSequence: String\\n        $parentId: String\\n        $referenceId: String\\n        $sufficiency: String\\n        $tactic: String\\n        $then: String\\n    ) {\\n        updateNodeAttributes(\\n            id: $id\\n            and: $and\\n            because: $because\\n            description: $description\\n            entityType: $entityType\\n            if: $if\\n            logic: $logic\\n            name: $name\\n            necessity: $necessity\\n            optionalityAndSequence: $optionalityAndSequence\\n            parentId: $parentId\\n            referenceId: $referenceId\\n            sufficiency: $sufficiency\\n            tactic: $tactic\\n            then: $then\\n        ) {\\n            id\\n            and\\n            because\\n            description\\n            entityType\\n            if\\n            logic\\n            name\\n            necessity\\n            optionalityAndSequence\\n            parentId\\n            referenceId\\n            sufficiency\\n            tactic\\n            then\\n        }\\n    }\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    query queryTreeById($id: ID) {\\n        getTreeById(id: $id) {\\n            and\\n            because\\n            childrenIds\\n            description\\n            entityType\\n            id\\n            if\\n            isRoot\\n            lastUpdated\\n            logic\\n            name\\n            necessity\\n            optionalityAndSequence\\n            parentId\\n            referenceId\\n            status\\n            sufficiency\\n            tactic\\n            then\\n            treeId\\n        }\\n    }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import{gql}from'apollo-boost';export var GET_TREE_BY_ID=gql(_templateObject());export var SET_NODE_ATTRIBUTES=gql(_templateObject2());export var CREATE_CHILD_NODE=gql(_templateObject3());export var DELETE_NODE=gql(_templateObject4());","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/services/graphQL/editorApiHelper.js"],"names":["gql","GET_TREE_BY_ID","SET_NODE_ATTRIBUTES","CREATE_CHILD_NODE","DELETE_NODE"],"mappings":"s9HAAA,OAASA,GAAT,KAAoB,cAApB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAGD,GAAH,mBAApB,CA2BP,MAAO,IAAME,CAAAA,mBAAmB,CAAGF,GAAH,oBAAzB,CAsDP,MAAO,IAAMG,CAAAA,iBAAiB,CAAGH,GAAH,oBAAvB,CAsDP,MAAO,IAAMI,CAAAA,WAAW,CAAGJ,GAAH,oBAAjB","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const GET_TREE_BY_ID = gql`\n    query queryTreeById($id: ID) {\n        getTreeById(id: $id) {\n            and\n            because\n            childrenIds\n            description\n            entityType\n            id\n            if\n            isRoot\n            lastUpdated\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            status\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\n\nexport const SET_NODE_ATTRIBUTES = gql`\n    mutation mutateNodeAttributes(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $id: ID\n        $if: String\n        $logic: String\n        $name: String\n        $necessity: String\n        $optionalityAndSequence: String\n        $parentId: String\n        $referenceId: String\n        $sufficiency: String\n        $tactic: String\n        $then: String\n    ) {\n        updateNodeAttributes(\n            id: $id\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $name\n            necessity: $necessity\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            id\n            and\n            because\n            description\n            entityType\n            if\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n        }\n    }\n`;\n\nexport const CREATE_CHILD_NODE = gql`\n    mutation createChildNode(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $if: String\n        $logic: String\n        $necessity: String\n        $name: String\n        $optionalityAndSequence: String\n        $parentId: ID\n        $referenceId: String\n        $tactic: String\n        $then: String\n        $sufficiency: String\n    ) {\n        createChildNode(\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $necessity\n            necessity: $name\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            and\n            because\n            description\n            entityType\n            id\n            if\n            isRoot\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\n\nexport const DELETE_NODE = gql`\n    mutation deleteNodeAndAllChildren($id: ID) {\n        deleteNodeAndAllChildren(id: $id) {\n            referenceId\n        }\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}