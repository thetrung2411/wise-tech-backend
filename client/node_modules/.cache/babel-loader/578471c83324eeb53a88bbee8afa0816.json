{"ast":null,"code":"var _jsxFileName = \"/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/components/tree-card/treeCard.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useMutation } from '@apollo/react-hooks';\nimport cogoToast from 'cogo-toast';\nimport { Link, useHistory } from 'react-router-dom';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/icon-plus.svg\";\nimport { ReactComponent as WTLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/logo-brand-full.svg\";\nimport toShortDate from '../../services/dateService';\nimport StatusDropdown from '../tree-status-dropdown/statusDropdown';\nimport { CREATE_NEW_ROOT_NODE } from '../../services/graphQL/dashboardApiHelper';\nimport './treeCard.scss';\nexport default function TreeCard(props) {\n  const [createNewRootNode] = useMutation(CREATE_NEW_ROOT_NODE);\n  const history = useHistory();\n  const treeStatusOptions = {\n    published: [{\n      label: 'Unpublish',\n      value: 'draft'\n    }, {\n      label: 'Archive',\n      value: 'archived'\n    }],\n    draft: [{\n      label: 'Publish',\n      value: 'published'\n    }, {\n      label: 'Archive',\n      value: 'archived'\n    }]\n  };\n\n  function handleNewCardClick() {\n    createNewRootNode().then(res => {\n      cogoToast.success('This can be found in Drafts', {\n        heading: 'Created a new tree'\n      });\n      history.replace(`/tree/${res.data.createRootNode.id}`);\n    }).catch(() => {\n      cogoToast.error('Failed to create new node');\n    });\n  }\n\n  function modifyTreeStatus(selection) {\n    if (selection === 'archived') {\n      const {\n        hide\n      } = cogoToast.warn('Archived trees can only be restored by Admins', {\n        heading: 'Are you sure? Click this to continue',\n        onClick: () => {\n          props.modifyTreeStatus(props.treeId, selection);\n          hide();\n        },\n        hideAfter: 5\n      });\n    } else {\n      props.modifyTreeStatus(props.treeId, selection);\n    }\n  }\n\n  if (props.treeId) {\n    return /*#__PURE__*/React.createElement(Link, {\n      to: `/tree/${props.treeId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      key: props.treeId,\n      className: \"treeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      alt: props.name,\n      className: \"treeCard-thumbnail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(WTLogo, {\n      fill: \"#1d1765\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treeCard-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treeCard-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"treeCard-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, props.name), /*#__PURE__*/React.createElement(StatusDropdown, {\n      options: treeStatusOptions[props.status],\n      modifyTreeStatus: modifyTreeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"treeCard-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, \"Last edited: \", toShortDate(props.lastUpdated)))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treeCard newCard\",\n      onClick: handleNewCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newCard-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PlusIcon, {\n      fill: \"#0f2a46\",\n      className: \"newCard-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"treeCard-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"Create a new Tree\")));\n  }\n}\nTreeCard.propTypes = {\n  lastUpdated: PropTypes.string,\n  name: PropTypes.string,\n  status: PropTypes.string,\n  thumbnail: PropTypes.string,\n  treeId: PropTypes.string,\n  modifyTreeStatus: PropTypes.func\n};","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-master@566a617a8c4/src/components/tree-card/treeCard.jsx"],"names":["React","PropTypes","useMutation","cogoToast","Link","useHistory","toShortDate","StatusDropdown","CREATE_NEW_ROOT_NODE","TreeCard","props","createNewRootNode","history","treeStatusOptions","published","label","value","draft","handleNewCardClick","then","res","success","heading","replace","data","createRootNode","id","catch","error","modifyTreeStatus","selection","hide","warn","onClick","treeId","hideAfter","name","status","lastUpdated","propTypes","string","thumbnail","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;;;AAIA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,OAAO,iBAAP;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACpC,QAAM,CAACC,iBAAD,IAAsBT,WAAW,CAACM,oBAAD,CAAvC;AACA,QAAMI,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,iBAAiB,GAAG;AACtBC,IAAAA,SAAS,EAAE,CACP;AAAEC,MAAAA,KAAK,EAAE,WAAT;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KADO,EAEP;AAAED,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAFO,CADW;AAKtBC,IAAAA,KAAK,EAAE,CACH;AAAEF,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KADG,EAEH;AAAED,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAFG;AALe,GAA1B;;AAWA,WAASE,kBAAT,GAA8B;AAC1BP,IAAAA,iBAAiB,GACZQ,IADL,CACUC,GAAG,IAAI;AACTjB,MAAAA,SAAS,CAACkB,OAAV,CAAkB,6BAAlB,EAAiD;AAC7CC,QAAAA,OAAO,EAAE;AADoC,OAAjD;AAGAV,MAAAA,OAAO,CAACW,OAAR,CAAiB,SAAQH,GAAG,CAACI,IAAJ,CAASC,cAAT,CAAwBC,EAAG,EAApD;AACH,KANL,EAOKC,KAPL,CAOW,MAAM;AACTxB,MAAAA,SAAS,CAACyB,KAAV,CAAgB,2BAAhB;AACH,KATL;AAUH;;AAED,WAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,QAAIA,SAAS,KAAK,UAAlB,EAA8B;AAC1B,YAAM;AAAEC,QAAAA;AAAF,UAAW5B,SAAS,CAAC6B,IAAV,CAAe,+CAAf,EAAgE;AAC7EV,QAAAA,OAAO,EAAE,sCADoE;AAE7EW,QAAAA,OAAO,EAAE,MAAM;AACXvB,UAAAA,KAAK,CAACmB,gBAAN,CAAuBnB,KAAK,CAACwB,MAA7B,EAAqCJ,SAArC;AACAC,UAAAA,IAAI;AACP,SAL4E;AAM7EI,QAAAA,SAAS,EAAE;AANkE,OAAhE,CAAjB;AAQH,KATD,MASO;AACHzB,MAAAA,KAAK,CAACmB,gBAAN,CAAuBnB,KAAK,CAACwB,MAA7B,EAAqCJ,SAArC;AACH;AACJ;;AAED,MAAIpB,KAAK,CAACwB,MAAV,EAAkB;AACd,wBACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG,SAAQxB,KAAK,CAACwB,MAAO,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAExB,KAAK,CAACwB,MAAhB;AAAwB,MAAA,SAAS,EAAC,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAExB,KAAK,CAAC0B,IAAhB;AAAsB,MAAA,SAAS,EAAC,oBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B1B,KAAK,CAAC0B,IAApC,CADJ,eAEI,oBAAC,cAAD;AACI,MAAA,OAAO,EAAEvB,iBAAiB,CAACH,KAAK,CAAC2B,MAAP,CAD9B;AAEI,MAAA,gBAAgB,EAAER,gBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAQI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA2CvB,WAAW,CAACI,KAAK,CAAC4B,WAAP,CAAtD,CARJ,CAJJ,CADJ,CADJ;AAmBH,GApBD,MAoBO;AACH,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,OAAO,EAAEpB,kBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAC,SAAf;AAAyB,MAAA,SAAS,EAAC,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,CADJ,CADJ;AAQH;AACJ;AAEDT,QAAQ,CAAC8B,SAAT,GAAqB;AACjBD,EAAAA,WAAW,EAAErC,SAAS,CAACuC,MADN;AAEjBJ,EAAAA,IAAI,EAAEnC,SAAS,CAACuC,MAFC;AAGjBH,EAAAA,MAAM,EAAEpC,SAAS,CAACuC,MAHD;AAIjBC,EAAAA,SAAS,EAAExC,SAAS,CAACuC,MAJJ;AAKjBN,EAAAA,MAAM,EAAEjC,SAAS,CAACuC,MALD;AAMjBX,EAAAA,gBAAgB,EAAE5B,SAAS,CAACyC;AANX,CAArB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useMutation } from '@apollo/react-hooks';\nimport cogoToast from 'cogo-toast';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { ReactComponent as PlusIcon } from '../../assets/icons/icon-plus.svg';\nimport { ReactComponent as WTLogo } from '../../assets/icons/logo-brand-full.svg';\nimport toShortDate from '../../services/dateService';\nimport StatusDropdown from '../tree-status-dropdown/statusDropdown';\nimport { CREATE_NEW_ROOT_NODE } from '../../services/graphQL/dashboardApiHelper';\nimport './treeCard.scss';\n\nexport default function TreeCard(props) {\n    const [createNewRootNode] = useMutation(CREATE_NEW_ROOT_NODE);\n    const history = useHistory();\n    const treeStatusOptions = {\n        published: [\n            { label: 'Unpublish', value: 'draft' },\n            { label: 'Archive', value: 'archived' },\n        ],\n        draft: [\n            { label: 'Publish', value: 'published' },\n            { label: 'Archive', value: 'archived' },\n        ],\n    };\n\n    function handleNewCardClick() {\n        createNewRootNode()\n            .then(res => {\n                cogoToast.success('This can be found in Drafts', {\n                    heading: 'Created a new tree',\n                });\n                history.replace(`/tree/${res.data.createRootNode.id}`);\n            })\n            .catch(() => {\n                cogoToast.error('Failed to create new node');\n            });\n    }\n\n    function modifyTreeStatus(selection) {\n        if (selection === 'archived') {\n            const { hide } = cogoToast.warn('Archived trees can only be restored by Admins', {\n                heading: 'Are you sure? Click this to continue',\n                onClick: () => {\n                    props.modifyTreeStatus(props.treeId, selection);\n                    hide();\n                },\n                hideAfter: 5,\n            });\n        } else {\n            props.modifyTreeStatus(props.treeId, selection);\n        }\n    }\n\n    if (props.treeId) {\n        return (\n            <Link to={`/tree/${props.treeId}`}>\n                <div key={props.treeId} className='treeCard'>\n                    <div alt={props.name} className='treeCard-thumbnail'>\n                        <WTLogo fill='#1d1765' />\n                    </div>\n                    <div className='treeCard-title'>\n                        <div className='treeCard-container'>\n                            <p className='treeCard-name'>{props.name}</p>\n                            <StatusDropdown\n                                options={treeStatusOptions[props.status]}\n                                modifyTreeStatus={modifyTreeStatus}\n                            />\n                        </div>\n                        <p className='treeCard-info'>Last edited: {toShortDate(props.lastUpdated)}</p>\n                    </div>\n                </div>\n            </Link>\n        );\n    } else {\n        return (\n            <div className='treeCard newCard' onClick={handleNewCardClick}>\n                <div className='newCard-content'>\n                    <PlusIcon fill='#0f2a46' className='newCard-icon'></PlusIcon>\n                    <p className='treeCard-name'>Create a new Tree</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nTreeCard.propTypes = {\n    lastUpdated: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.string,\n    thumbnail: PropTypes.string,\n    treeId: PropTypes.string,\n    modifyTreeStatus: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}