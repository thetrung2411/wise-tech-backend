{"ast":null,"code":"import _slicedToArray from\"/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import EditNodeLayout from'./editNode.layout';import ViewNode from'./viewNode.layout';import CreateNodeLayout from'./createNode.layout';import'./previewBar.scss';export function PreviewBar(props){var _useState=useState(props.chooseMode),_useState2=_slicedToArray(_useState,2),viewingMode=_useState2[0],setViewingMode=_useState2[1];var _useState3=useState(props.nodeData),_useState4=_slicedToArray(_useState3,2),formData=_useState4[0],setFormData=_useState4[1];useEffect(function(){setFormData(props.nodeData);setViewingMode(props.chooseMode);},[props.nodeData,props.chooseMode]);function toggleViewingMode(){viewingMode==='viewing'?setViewingMode('editing'):setViewingMode('viewing');}if(viewingMode==='viewing'){return/*#__PURE__*/React.createElement(ViewNode,{resetPreviewBarAndDialogOpen:props.closePreview,toggleViewingMode:toggleViewingMode,formData:formData});}else if(viewingMode==='editing'){return/*#__PURE__*/React.createElement(EditNodeLayout,{updateCurrentNode:props.handleNodeAttributesUpdate,toggleViewingMode:toggleViewingMode,formData:formData,isParentRootNode:formData.parentId===props.rootNodeId});}else if(viewingMode==='creating'){return/*#__PURE__*/React.createElement(CreateNodeLayout,{createNewNode:props.refreshView,closeForm:props.closeForm,isParentRootNode:!formData.parentId,parentId:formData.id});}else return null;}","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/components/preview-bar/previewBar.jsx"],"names":["React","useState","useEffect","EditNodeLayout","ViewNode","CreateNodeLayout","PreviewBar","props","chooseMode","viewingMode","setViewingMode","nodeData","formData","setFormData","toggleViewingMode","closePreview","handleNodeAttributesUpdate","parentId","rootNodeId","refreshView","closeForm","id"],"mappings":"wLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,MAAOC,CAAAA,cAAP,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,mBAArB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qBAA7B,CACA,MAAO,mBAAP,CAEA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,eACQN,QAAQ,CAACM,KAAK,CAACC,UAAP,CADhB,wCACvBC,WADuB,eACVC,cADU,8BAEET,QAAQ,CAACM,KAAK,CAACI,QAAP,CAFV,yCAEvBC,QAFuB,eAEbC,WAFa,eAI9BX,SAAS,CAAC,UAAM,CACZW,WAAW,CAACN,KAAK,CAACI,QAAP,CAAX,CACAD,cAAc,CAACH,KAAK,CAACC,UAAP,CAAd,CACH,CAHQ,CAGN,CAACD,KAAK,CAACI,QAAP,CAAiBJ,KAAK,CAACC,UAAvB,CAHM,CAAT,CAKA,QAASM,CAAAA,iBAAT,EAA6B,CACzBL,WAAW,GAAK,SAAhB,CAA4BC,cAAc,CAAC,SAAD,CAA1C,CAAwDA,cAAc,CAAC,SAAD,CAAtE,CACH,CAED,GAAID,WAAW,GAAK,SAApB,CAA+B,CAC3B,mBACI,oBAAC,QAAD,EACI,4BAA4B,CAAEF,KAAK,CAACQ,YADxC,CAEI,iBAAiB,CAAED,iBAFvB,CAGI,QAAQ,CAAEF,QAHd,EADJ,CAOH,CARD,IAQO,IAAIH,WAAW,GAAK,SAApB,CAA+B,CAClC,mBACI,oBAAC,cAAD,EACI,iBAAiB,CAAEF,KAAK,CAACS,0BAD7B,CAEI,iBAAiB,CAAEF,iBAFvB,CAGI,QAAQ,CAAEF,QAHd,CAII,gBAAgB,CAAEA,QAAQ,CAACK,QAAT,GAAsBV,KAAK,CAACW,UAJlD,EADJ,CAQH,CATM,IASA,IAAIT,WAAW,GAAK,UAApB,CAAgC,CACnC,mBACI,oBAAC,gBAAD,EACI,aAAa,CAAEF,KAAK,CAACY,WADzB,CAEI,SAAS,CAAEZ,KAAK,CAACa,SAFrB,CAGI,gBAAgB,CAAE,CAACR,QAAQ,CAACK,QAHhC,CAII,QAAQ,CAAEL,QAAQ,CAACS,EAJvB,EADJ,CAQH,CATM,IASA,OAAO,KAAP,CACV","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport EditNodeLayout from './editNode.layout';\nimport ViewNode from './viewNode.layout';\nimport CreateNodeLayout from './createNode.layout';\nimport './previewBar.scss';\n\nexport function PreviewBar(props) {\n    const [viewingMode, setViewingMode] = useState(props.chooseMode);\n    const [formData, setFormData] = useState(props.nodeData);\n\n    useEffect(() => {\n        setFormData(props.nodeData);\n        setViewingMode(props.chooseMode);\n    }, [props.nodeData, props.chooseMode]);\n\n    function toggleViewingMode() {\n        viewingMode === 'viewing' ? setViewingMode('editing') : setViewingMode('viewing');\n    }\n\n    if (viewingMode === 'viewing') {\n        return (\n            <ViewNode\n                resetPreviewBarAndDialogOpen={props.closePreview}\n                toggleViewingMode={toggleViewingMode}\n                formData={formData}\n            />\n        );\n    } else if (viewingMode === 'editing') {\n        return (\n            <EditNodeLayout\n                updateCurrentNode={props.handleNodeAttributesUpdate}\n                toggleViewingMode={toggleViewingMode}\n                formData={formData}\n                isParentRootNode={formData.parentId === props.rootNodeId}\n            />\n        );\n    } else if (viewingMode === 'creating') {\n        return (\n            <CreateNodeLayout\n                createNewNode={props.refreshView}\n                closeForm={props.closeForm}\n                isParentRootNode={!formData.parentId}\n                parentId={formData.id}\n            />\n        );\n    } else return null;\n}\n\nPreviewBar.propTypes = {\n    rootNodeId: PropTypes.string.isRequired,\n    nodeData: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        entityType: PropTypes.string,\n        description: PropTypes.string,\n        tactic: PropTypes.string,\n        necessity: PropTypes.string,\n        logic: PropTypes.string,\n        if: PropTypes.string,\n        and: PropTypes.string,\n        then: PropTypes.string,\n        because: PropTypes.string,\n        sufficiency: PropTypes.string,\n        optionalityAndSequence: PropTypes.string,\n        nodeDataColor: PropTypes.string,\n        customProperty: PropTypes.string,\n        parentId: PropTypes.string,\n        children: PropTypes.array,\n    }),\n    closeForm: PropTypes.func.isRequired,\n    handleNodeAttributesUpdate: PropTypes.func.isRequired,\n    chooseMode: PropTypes.string.isRequired,\n    closePreview: PropTypes.func.isRequired,\n    refreshView: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}