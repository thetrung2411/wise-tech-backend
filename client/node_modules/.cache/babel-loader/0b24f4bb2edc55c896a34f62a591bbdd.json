{"ast":null,"code":"import { gql } from 'apollo-boost';\nexport const GET_TREE_BY_ID = gql`\n    query queryTreeById($id: ID) {\n        getTreeById(id: $id) {\n            and\n            because\n            childrenIds\n            description\n            entityType\n            id\n            if\n            isRoot\n            lastUpdated\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            status\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\nexport const SET_NODE_ATTRIBUTES = gql`\n    mutation mutateNodeAttributes(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $id: ID\n        $if: String\n        $logic: String\n        $name: String\n        $necessity: String\n        $optionalityAndSequence: String\n        $parentId: String\n        $referenceId: String\n        $sufficiency: String\n        $tactic: String\n        $then: String\n    ) {\n        updateNodeAttributes(\n            id: $id\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $name\n            necessity: $necessity\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            id\n            and\n            because\n            description\n            entityType\n            if\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n        }\n    }\n`;\nexport const CREATE_CHILD_NODE = gql`\n    mutation createChildNode(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $if: String\n        $logic: String\n        $necessity: String\n        $name: String\n        $optionalityAndSequence: String\n        $parentId: ID\n        $referenceId: String\n        $tactic: String\n        $then: String\n        $sufficiency: String\n    ) {\n        createChildNode(\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $necessity\n            necessity: $name\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            and\n            because\n            description\n            entityType\n            id\n            if\n            isRoot\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\nexport const DELETE_NODE = gql`\n    mutation deleteNodeAndAllChildren($id: ID) {\n        deleteNodeAndAllChildren(id: $id) {\n            referenceId\n        }\n    }\n`;","map":{"version":3,"sources":["/Users/thetrung/Downloads/wtg-backendv2-master@42dd489862c/client/src/services/graphQL/editorApiHelper.js"],"names":["gql","GET_TREE_BY_ID","SET_NODE_ATTRIBUTES","CREATE_CHILD_NODE","DELETE_NODE"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,cAAc,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;CAA3B;AA2BP,OAAO,MAAME,mBAAmB,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAhC;AAsDP,OAAO,MAAMG,iBAAiB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;AAsDP,OAAO,MAAMI,WAAW,GAAGJ,GAAI;;;;;;CAAxB","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const GET_TREE_BY_ID = gql`\n    query queryTreeById($id: ID) {\n        getTreeById(id: $id) {\n            and\n            because\n            childrenIds\n            description\n            entityType\n            id\n            if\n            isRoot\n            lastUpdated\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            status\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\n\nexport const SET_NODE_ATTRIBUTES = gql`\n    mutation mutateNodeAttributes(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $id: ID\n        $if: String\n        $logic: String\n        $name: String\n        $necessity: String\n        $optionalityAndSequence: String\n        $parentId: String\n        $referenceId: String\n        $sufficiency: String\n        $tactic: String\n        $then: String\n    ) {\n        updateNodeAttributes(\n            id: $id\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $name\n            necessity: $necessity\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            id\n            and\n            because\n            description\n            entityType\n            if\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n        }\n    }\n`;\n\nexport const CREATE_CHILD_NODE = gql`\n    mutation createChildNode(\n        $and: String\n        $because: String\n        $description: String\n        $entityType: nodeEntityTypeEnum\n        $if: String\n        $logic: String\n        $necessity: String\n        $name: String\n        $optionalityAndSequence: String\n        $parentId: ID\n        $referenceId: String\n        $tactic: String\n        $then: String\n        $sufficiency: String\n    ) {\n        createChildNode(\n            and: $and\n            because: $because\n            description: $description\n            entityType: $entityType\n            if: $if\n            logic: $logic\n            name: $necessity\n            necessity: $name\n            optionalityAndSequence: $optionalityAndSequence\n            parentId: $parentId\n            referenceId: $referenceId\n            sufficiency: $sufficiency\n            tactic: $tactic\n            then: $then\n        ) {\n            and\n            because\n            description\n            entityType\n            id\n            if\n            isRoot\n            logic\n            name\n            necessity\n            optionalityAndSequence\n            parentId\n            referenceId\n            sufficiency\n            tactic\n            then\n            treeId\n        }\n    }\n`;\n\nexport const DELETE_NODE = gql`\n    mutation deleteNodeAndAllChildren($id: ID) {\n        deleteNodeAndAllChildren(id: $id) {\n            referenceId\n        }\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}